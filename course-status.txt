
class App extends React.Component {
    state = {
      projects: [
        {id: 1, title: "Angular eBook",phase:"todo", completed:false, edit: false},
        {id: 2, title: "React eBook",phase:"completed", completed:true, edit: false},
        {id: 3, title: "NodeJS eBook",phase:"todo", completed:false,edit: false},
        {id: 4, title: "Modern JavaScript eBook",phase:"inprogress", completed:false,edit: false},
        {id: 5, title: "Node Microservice",phase:"inprogress", completed:false,edit: false},
      ]
    }
  
    onProjectAdd = (project) => {
      let maxId = +new Date();
      project.id = maxId;
      
      let projects = [project, ...this.state.projects];
      
      this.setState({
        projects
      });
   
    }
    
    onToggleEditProject = (projectId) => {
      let projects = this.state.projects.map((p) => {
        if (p.id == projectId) {
          p.edit = !p.edit;
        }
        return p;
      });
      this.setState({
        projects
      });
    }
    
    onUpdate = (id, project) => {
      let projects = this.state.projects.map((p) => {
        if (p.id == id) {
          p.edit = !p.edit;
          p.title = project.title;
          p.phase = project.phase;
        }
        return p;
      });
      
      this.setState({
        projects
      })
    }
    
    onDeleteProject = (id, title) => {
      if (confirm(`Are you sure you want to delete ${title}?`)) {
        let projects = this.state.projects.filter((p) => {
          return p.id != id;
        });
        
        this.setState({
          projects
        });
      }
      
    }
    
    render() {
     
      return (
        <div>
           <Header title="Project Management App">
              <SubHeader color="red"
                title="(Kanban based system)" />
           </Header>
           <hr/>
           <ProjectForm onProjectAdd={this.onProjectAdd} />
           <ProjectList 
               projects={this.state.projects} 
               onEdit={this.onToggleEditProject}
               onUpdate={this.onUpdate}
               onCancel={this.onToggleEditProject}
               onDelete={this.onDeleteProject}
           />
          
        </div>
      );
    }
}

class ProjectForm extends React.Component {
  static propTypes = {
    onProjectAdd: PropTypes.func.isRequired,
  }
  addProject = (event) => {
     event.preventDefault();
     let newProject = {
       title: this.title.value,
       phase: this.phase.value
     };
     this.props.onProjectAdd(newProject);
  }
  render() {
    return (
      <form className="project-form" onSubmit={this.addProject}>
        <div>
          <label>Title: </label>
          <input type="text" ref={(title)=>{this.title= title}} />
        </div>
        <div>
          <label>Phase: </label>
          <select ref={(phase) => {this.phase = phase}} >
             <option value="todo">todo</option>
             <option value="inprogress">in-progress</option>
             <option value="completed">completed</option>
          </select>
        </div>
        <div>
          <button type="submit">submit</button>
        </div>
      </form>
    );
  }
}

class ProjectList extends React.Component {
   state = {
     title: "",
     phase: ""
   }
   
   constructor(props) {
     super(props);
   }

   onEdit = (project) => {
     this.setState({
       title: project.title,
       phase: project.phase
     });
     
     this.props.onEdit(project.id);
   }
   
   onTitleChange = (e) => {
     this.setState({
       title: e.target.value
     });
   }
   
   onPhaseChange = (e) => {
     this.setState({
       phase: e.target.value
     });
   }
   
   onUpdate = (id) => {
     console.log(this.state);
     this.props.onUpdate(id, this.state);
   }
   
   onDelete = (id, title) => {
     this.props.onDelete(id, title);
   }
   
   onCancel = (id) => {
     this.props.onCancel(id);
   }
   
   onEdit = (project) => {
     this.setState({
       title: project.title,
       phase: project.phase
     });
     
     this.props.onEdit(project.id);
   }
   
   editorUI(project) {
     return (
       <React.Fragment>
         <div className="project-content">
           <input type="text"
                defaultValue={project.title}
                onChange={this.onTitleChange}
           />
          
           <select defaultValue={project.phase} 
              onChange={this.onPhaseChange}>
             <option value="todo">todo</option>
             <option value="inprogress">in-progress</option>
             <option value="completed">completed</option>
           </select>
           
         </div>
         <div className="project-buttons">
            <button className="button edit"
               onClick={()=>this.onUpdate(project.id)}
            >save</button>
            <button className="button cancel"
               onClick={()=>this.onCancel(project.id)}
            >cancel</button>
       
         </div>
       </React.Fragment>
     );
   }
  
   itemUI(project) {
     return (
       <React.Fragment>
          <div className="project-content">
            <span className="title">{project.title}</span>
            <span className="title">{project.phase}</span>
          </div>
          <div className="project-buttons">
            <button className="button edit"
               onClick={()=>this.onEdit(project)}>
               edit
            </button>
           <button className="button delete"
               onClick={()=>this.onDelete(project.id, project.title)}>
               delete
            </button>
            
          </div>
       </React.Fragment>
     );
   }
  
   render() {
     let {projects} = this.props;
     let projectUI = projects.map((project) => {
        let projectItem = project.edit ?
              this.editorUI(project)
            :
              this.itemUI(project)
        
        return (
          <li className="project-item"  key={project.id}>
             {projectItem} 
          </li>
        );
     });
     return (
       <ul className="project-list">
         {projectUI}
       </ul>
     );
   }
}

class Header extends React.Component {
  constructor(props) {
      super(props);
  }
  
  render() {
    return (
      <React.Fragment>
        <h1>{this.props.title}</h1>
        {this.props.children}
      </React.Fragment>
   );  
  }
}

const SubHeader = (props) => {
  const style = {
    color: props.color || "blue"
  }
  return (
    <h3 style={style}>{props.title}</h3>
  );
}


ReactDOM.render(
  <App />
  ,
  document.getElementById("root")
);







